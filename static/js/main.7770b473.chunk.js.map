{"version":3,"sources":["components/Card.js","components/CardWrapper.js","components/Form.js","components/GitHub.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","avatar","company","className","width","height","alt","title","src","CardWrapper","profiles","map","data","index","key","id","avatar_url","cardList","Form","handleInputChange","event","setState","userName","currentTarget","value","handleSubmit","a","async","preventDefault","axios","get","state","res","onSumit","onSubmit","this","type","placeholder","onChange","React","Component","GitHub","newProfile","newProfileData","prevState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAyBeA,MAvBf,SAAcC,GAAQ,IAGlBC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,OACAC,EACEH,EADFG,QAEF,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,mBAAmBC,MAAM,KAAKC,OAAO,KAAKC,IAAKN,EAAMO,MAAOP,EAAMQ,IAAKP,IACtF,yBAAKE,UAAU,wBACZH,GACC,yBAAKG,UAAU,qBAAqBH,GAErCE,GACC,yBAAKC,UAAU,wBAAwBD,MCKlCO,MAnBf,SAAqBV,GAEnB,IAOEW,EACEX,EADFW,SAGF,OACE,6BAXe,SAACA,GAChB,OAAOA,EAASC,KAAI,SAACC,EAAMC,GACzB,OAAO,kBAAE,EAAF,CAAOC,IAAKF,EAAKG,GAAIf,KAAMY,EAAKZ,KAAMC,OAAQW,EAAKI,WAAYd,QAASU,EAAKV,aAUnFe,CAASP,K,iCCiBDQ,E,YA9Bb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAKRoB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZC,SAAUF,EAAMG,cAAcC,SARf,EAWnBC,aAAe,SAAOL,GAAP,eAAAM,EAAAC,OAAA,uDACbP,EAAMQ,iBADO,WAAAF,EAAA,MAEKG,IAAMC,IAAN,uCAA0C,EAAKC,MAAMT,YAF1D,OAEPU,EAFO,OAGb,EAAKjC,MAAMkC,QAAQD,EAAIpB,MAEvB,EAAKS,SAAS,CACZC,SAAU,KANC,sCATb,EAAKS,MAAQ,CACXT,SAAU,IAHK,E,sEAqBjB,OACE,0BAAMnB,UAAU,mBAAmB+B,SAAUC,KAAKV,cAChD,2BAAOW,KAAK,OAAOC,YAAY,kBAAkBb,MAAOW,KAAKJ,MAAMT,SAAUgB,SAAUH,KAAKhB,oBAC5F,iD,GAzBWoB,IAAMC,WC4BVC,E,YA1Bb,WAAY1C,GAAQ,IAAD,8BACjB,4CAAMA,KAKR2C,WAAa,SAACC,GACZ,EAAKtB,UAAS,SAAAuB,GAAS,MAAK,CAC1BlC,SAAS,GAAD,mBAAMkC,EAAUlC,UAAhB,CAA0BiC,SANpC,EAAKZ,MAAQ,CACXrB,SAAU,IAHK,E,sEAWT,IAENA,EACEyB,KAAKJ,MADPrB,SAGF,OACE,oCACE,wBAAIP,UAAU,6BAAd,uBACA,kBAAC,EAAD,CAAM8B,QAASE,KAAKO,aACpB,kBAAC,EAAD,CAAahC,SAAUA,S,GArBV6B,IAAMC,WCOZK,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7770b473.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card(props) {\r\n\r\n  const {\r\n    name,\r\n    avatar,\r\n    company\r\n  } = props;\r\n  return (\r\n    <div className=\"github-card\">\r\n      <img className=\"github-card__img\" width=\"75\" height=\"75\" alt={name} title={name} src={avatar} />\r\n      <div className=\"github-card__content\">\r\n        {name &&\r\n          <div className=\"github-card__name\">{name}</div>\r\n        }\r\n        {company &&\r\n          <div className=\"github-card__company\">{company}</div>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardWrapper(props) {\r\n\r\n  const cardList = (profiles) => {\r\n    return profiles.map((data, index) => {\r\n      return < Card key={data.id} name={data.name} avatar={data.avatar_url} company={data.company} />\r\n    });\r\n  };\r\n\r\n  const {\r\n    profiles\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      {cardList(profiles)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardWrapper;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userName: '',\r\n    }\r\n  }\r\n  handleInputChange = (event) => {\r\n    this.setState({\r\n      userName: event.currentTarget.value\r\n    })\r\n  }\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const res = await axios.get(`https://api.github.com/users/${this.state.userName}`);\r\n    this.props.onSumit(res.data);\r\n    // console.log(res.data)\r\n    this.setState({\r\n      userName: ''\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <form className=\"github-app__form\" onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" placeholder=\"GitHub username\" value={this.state.userName} onChange={this.handleInputChange} />\r\n        <button>Add card</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport CardWrapper from './CardWrapper';\r\nimport Form from './Form';\r\n\r\nclass GitHub extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      profiles: []\r\n    }\r\n  }\r\n  newProfile = (newProfileData) => {\r\n    this.setState(prevState => ({\r\n      profiles: [...prevState.profiles, newProfileData]\r\n    }))\r\n  }\r\n  render() {\r\n    const {\r\n      profiles\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h1 className=\"github-app__primary-title\">The GitHub Card App</h1>\r\n        <Form onSumit={this.newProfile} />\r\n        <CardWrapper profiles={profiles} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GitHub;","import React from 'react';\r\n\r\nimport './style/git-hub.scss';\r\nimport GitHub from './components/GitHub';\r\n\r\nfunction App() {\r\n  return (\r\n    <GitHub />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/reset.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}